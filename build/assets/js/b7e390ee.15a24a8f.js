"use strict";(self.webpackChunkvolder_doc=self.webpackChunkvolder_doc||[]).push([[1706],{3905:function(e,r,n){n.d(r,{Zo:function(){return s},kt:function(){return f}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=t.createContext({}),c=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},s=function(e){var r=c(e.components);return t.createElement(u.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=o,v=d["".concat(u,".").concat(f)]||d[f]||p[f]||i;return n?t.createElement(v,a(a({ref:r},s),{},{components:n})):t.createElement(v,a({ref:r},s))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var u in r)hasOwnProperty.call(r,u)&&(l[u]=r[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5570:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var t=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={sidebar_position:9},u="Single volder",c={unversionedId:"api/single-volder",id:"version-2.0.0/api/single-volder",title:"Single volder",description:"SingleVolder function is a schema builder and validator for a single value other than Volder constructor for multi values.",source:"@site/versioned_docs/version-2.0.0/api/single-volder.md",sourceDirName:"api",slug:"/api/single-volder",permalink:"/docs/api/single-volder",editUrl:"https://github.com/devSupporters/volder-doc/tree/main/versioned_docs/version-2.0.0/api/single-volder.md",tags:[],version:"2.0.0",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Other types",permalink:"/docs/api/volder-types"},next:{title:"Contributing to Volder",permalink:"/docs/contributing"}},s=[],p={toc:s};function d(e){var r=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"single-volder"},"Single volder"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"SingleVolder")," function is a schema builder and validator for a single value other than ",(0,i.kt)("inlineCode",{parentName:"p"},"Volder")," constructor for multi values."),(0,i.kt)("p",null,"you define it and pass a configured ",(0,i.kt)("inlineCode",{parentName:"p"},"Object")," as first arg1."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { singleVolder } from "volder";\n\nconst person = singleVolder({ type: String, maxLength: 9, required: true }); // pass the value configs.\n\n// singleVolder has two validator function.\nsingleVolder.valid(/*input*/) // -> return Boolean (true or false) depend of input if it a correct input.\nconst { valid, errors, value } = singleVolder.validate(/*input*/) // -> return object\n// valid = Boolean, the validity if input.\n// errors = String, return a error message if the the validity is false.\n// value = return new immutable value with changes if set transfomation configs.\n')))}d.isMDXComponent=!0}}]);